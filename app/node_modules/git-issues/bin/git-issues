#!/usr/bin/env node

// Dependencies
var GitIssues = require("../lib")
  , Table = require("le-table")
  , Couleurs = require("couleurs")()
  , Clp = require("clp")
  , Package = require("../package")
  , Logger = require("bug-killer")
  ;

// Table defaults
Logger.config.displayDate = false;
Logger.config.logLevel = 4;

var usernameOption = new Clp.Option(["u", "user"], "The provider username.", "username")
  , passwordOption = new Clp.Option(["p", "password"], "The provider password or token.", "password")
  , repoOption = new Clp.Option(["r", "repo"], "The path to the repository.", "path", process.cwd())
  , statusOption = new Clp.Option(["s", "status"], "The status of the issue.", "status")
  , labelOption = new Clp.Option(["l", "label"], "The label(s) to search for.", "label")
  , parser = new Clp({
        name: "Git Issues"
      , version: Package.version
      , process: true
      , exe: Package.name
      , examples: [
            "git-issues # No authentification for public repositories"
          , "git-issues -u your-username -p 'your-password'"
          , "git-issues -r ../another-repository"
          , "git-issues -s 'closed'"
          , "git-issues -l enhancement,bug"
        ]
      , docs_url: "https://github.com/SoftwareScales/git-issues"
    }, [
        usernameOption, passwordOption, repoOption, statusOption, labelOption
    ])
  ;

function labelsFor(issue) {
  return (issue.labels || []).map(function (label) {
    return label.name;
  }).filter(function (labelName) {
    return labelName;
  }).join(",");
}

GitIssues.fromPath(repoOption.value, statusOption.value, {
    username: usernameOption.value
  , password: passwordOption.value
}, function (err, issues) {
    if (err) {
        return Logger.log(err, "error");
    }

    if (!issues || issues.length === 0) {
        Logger.log("No issues in this repository", "info");
        process.exit(0);
    }

    var table = new Table({
        marks: {
            nw: "┌"
          , n:  "─"
          , ne: "┐"
          , e:  "│"
          , se: "┘"
          , s:  "─"
          , sw: "└"
          , w:  "│"
          , b:  " "
          , mt: "┬"
          , ml: "├"
          , mr: "┤"
          , mb: "┴"
          , mm: "┼"
        }
    });

    table.addRow([
        Couleurs.bold("#")
      , Couleurs.bold("Label(s)")
      , Couleurs.bold("Title")
      , {
            text: Couleurs.bold("Status")
          , data: {
                width: 10
            }
        }
    ]);

    issues.sort(function (a, b) {
        return a.number - b.number;
    });

    if (labelOption.value) {
      labels = labelOption.value.split(',');
      issues = issues.filter(issue => {
        var filterLabels = issue.labels.filter(label => labels.indexOf(label.name) !== -1);
        return filterLabels.length > 0;
      });
    }

    issues.forEach(function (cI) {
        // TODO Table seems to break if the string is undefined or empty
        var labels = labelsFor(cI) || " ";
        table.addRow([
            cI.number,
            labels,
            cI.title,
            {
              text: cI.state.toUpperCase()
            , data: {
                width: 10
              }
            }
          ]);
    });

    process.stdout.write(table.toString() + "\n");
});
